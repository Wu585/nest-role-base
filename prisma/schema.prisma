// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String           @id @default(uuid())
  username  String           @unique
  password  String
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  logs      Log[]
  profile   Profile?
  roles     UsersWithRoles[]
}

model Profile {
  id        String   @id @default(uuid())
  gender    Int
  photo     String
  address   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @map("user_id")
}

model Role {
  id        String           @id @default(uuid())
  name      String
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  users     UsersWithRoles[]
}

model UsersWithRoles {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, roleId])
}

model Log {
  id        String   @id @default(uuid())
  path      String
  method    String
  data      String
  result    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
}
